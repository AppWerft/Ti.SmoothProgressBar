/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2017 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package de.appwerft.smoothprogressbar;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollProxy;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.TiC;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;
import org.appcelerator.titanium.util.TiConvert;
import org.appcelerator.titanium.proxy.TiViewProxy;
import org.appcelerator.titanium.view.TiCompositeLayout;
import org.appcelerator.titanium.view.TiCompositeLayout.LayoutArrangement;
import org.appcelerator.titanium.view.TiUIView;

import android.app.Activity;
import android.widget.ProgressBar;
import android.R.bool;
import android.app.Activity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup.LayoutParams;
import android.view.animation.AccelerateDecelerateInterpolator;
import android.view.animation.AccelerateInterpolator;
import android.view.animation.DecelerateInterpolator;
import android.view.animation.Interpolator;
import android.view.animation.LinearInterpolator;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.content.res.Resources;
import android.graphics.Color;
import fr.castorflex.android.smoothprogressbar.SmoothProgressDrawable;

// This proxy can be created by calling Smoothprogressbar.createExample({message: "hello world"})
@Kroll.proxy(creatableInModule=SmoothprogressbarModule.class)
public class ViewProxy extends TiViewProxy
{
	// Standard Debugging variables
		private static final String TAG = "SmoothProgressBarProxy";

		// default settings
		private float speed = (float) 1.0;
		private float strokeWidth = (float) 10;
		private int sectionsCount = 4;
		private int separatorLength = 8;
		private boolean mirrorMode = false;
		private boolean reversed = false;
		private int color = Color.parseColor("#33b5e5");
		private Interpolator interpolator = new LinearInterpolator();

		ProgressBar progressBar;

		private class ExampleView extends TiUIView {
			public ExampleView(TiViewProxy proxy) {
				super(proxy);

				String packageName = proxy.getActivity().getPackageName();
				Resources resources = proxy.getActivity().getResources();

				View progressBarWrapper;

				int resId_progressBarHolder = -1;
				int resId_progressBar = -1;

				resId_progressBarHolder = resources.getIdentifier(
						"progressbar_layout", "layout", packageName);
				resId_progressBar = resources.getIdentifier("progressbar_default",
						"id", packageName);

				LayoutInflater inflater = LayoutInflater.from(getActivity());
				progressBarWrapper = inflater
						.inflate(resId_progressBarHolder, null);
				progressBar = (ProgressBar) progressBarWrapper
						.findViewById(resId_progressBar);

				TiApplication appContext = TiApplication.getInstance();

				progressBar
						.setIndeterminateDrawable(new SmoothProgressDrawable.Builder(
								appContext).sectionsCount(sectionsCount)
								.separatorLength(separatorLength).speed(speed)
								.mirrorMode(mirrorMode).reversed(reversed)
								.color(color).strokeWidth(strokeWidth)
								.interpolator(interpolator).build());

				setNativeView(progressBarWrapper);

			}

			@Override
			public void processProperties(KrollDict d) {
				super.processProperties(d);
			}
		}

		// Constructor
		public ViewProxy() {
			super();
		}

		@Override
		public TiUIView createView(Activity activity) {
			TiUIView view = new ExampleView(this);
			// view.getLayoutParams().autoFillsHeight = true;
			// view.getLayoutParams().autoFillsWidth = true;
			return view;
		}

		// Handle creation options
		@Override
		public void handleCreationDict(KrollDict options) {
			super.handleCreationDict(options);

			if (options.containsKeyAndNotNull("color")) {
				color = TiConvert.toColor(options, "color");
			}

			if (options.containsKeyAndNotNull("sectionsCount")) {
				sectionsCount = TiConvert.toInt(options, "sectionsCount");
			}

			if (options.containsKeyAndNotNull("separatorLength")) {
				separatorLength = TiConvert.toInt(options, "separatorLength");
			}

			if (options.containsKeyAndNotNull("mirrorMode")) {
				mirrorMode = TiConvert.toBoolean(options, "mirrorMode");
			}
			if (options.containsKeyAndNotNull("reversed")) {
				reversed = TiConvert.toBoolean(options, "reversed");
			}

			if (options.containsKeyAndNotNull("speed")) {
				speed = TiConvert.toFloat(options, "speed");
			}

			if (options.containsKeyAndNotNull("strokeWidth")) {
				strokeWidth = TiConvert.toFloat(options, "strokeWidth");
			}

			if (options.containsKeyAndNotNull("interpolator")) {
				int i = TiConvert.toInt(options, "interpolator");

				if (i == 0) {
					interpolator = new LinearInterpolator();
				} else if (i == 1) {
					interpolator = new AccelerateInterpolator();
				} else if (i == 2) {
					interpolator = new DecelerateInterpolator();
				} else if (i == 3) {
					interpolator = new AccelerateDecelerateInterpolator();
				}
			}

	}
	
}
